version: "3"
services:
  timescale:
    image: timescale/timescaledb:1.7.2-pg12
    volumes:
      - timescale_data:/var/lib/postgresql
      - ./099_create_tables.sql:/docker-entrypoint-initdb.d/099_create_tables.sql
    ports:
      - 5432:5432
    restart: "on-failure"
    environment:
      POSTGRES_PASSWORD: password
  zookeeper:
    image: 'docker.io/bitnami/zookeeper:3-debian-10'
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: "on-failure"
  kafka:
    image: 'docker.io/bitnami/kafka:2-debian-10'
    ports:
      - '9092:9092'
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://192.168.1.180:9092
    depends_on:
      - zookeeper
    restart: "on-failure"
  binance-producer:
    build: ./binance
    volumes:
      - ./binance/secrets.py:/home/secrets.py:ro
    depends_on:
      - kafka
    command: -k 192.168.1.180:9092
    restart: "on-failure"
  tweets-producer:
    build: ./tweepy
    volumes:
      - ./tweepy/secrets.py:/home/secrets.py:ro
    depends_on:
      - kafka
    command: -k 192.168.1.180:9092
    restart: "on-failure"
  spark:
    image: bde2020/spark-master:3.0.0-hadoop3.2
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
  spark-worker:
    image: bde2020/spark-worker:3.0.0-hadoop3.2
    depends_on:
      - spark
    # ports:
    #   - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark:7077"
      - "SPARK_WORKER_CORES=4"
      - "SPARK_WORKER_MEMORY=4g"
  streamapp:
    build: ./streamapp
    depends_on:
      - spark
    environment:
      - "SPARK_MASTER=spark://spark:7077"
      - "SPARK_EXECUTOR_MEMORY=4g"
    command: >
      --lrmodel hdfs://192.168.1.180:9000/tmp/models/spark-logistic-regression-model
      --vcmodel hdfs://192.168.1.180:9000/tmp/models/spark-cv-model
      --jdbcurl jdbc:postgresql://192.168.1.180:5432/postgres
      --kafka 192.168.1.180:9092
    restart: "on-failure"
  trainapp:
    build: ./trainapp
    depends_on:
      - spark
    environment:
      - "SPARK_MASTER=spark://spark:7077"
      - "SPARK_EXECUTOR_MEMORY=4g"
    command: >
      --lrmodel hdfs://192.168.1.180:9000/tmp/models/spark-logistic-regression-model
      --vcmodel hdfs://192.168.1.180:9000/tmp/models/spark-cv-model
      --jdbcurl jdbc:postgresql://192.168.1.180:5432/postgres
    restart: "no"
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: on-failure
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: on-failure
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
  grafana:
    image: grafana/grafana:7.1.5-ubuntu
    restart: on-failure
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - 3000:3000


volumes:
  timescale_data:
  zookeeper_data:
  kafka_data:
  hadoop_namenode:
  hadoop_datanode:
  grafana_data:
