version: "3"
services:
  timescale:
    image: timescale/timescaledb:1.7.2-pg12
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./099_create_tables.sql:/docker-entrypoint-initdb.d/099_create_tables.sql
    ports:
      - 5432:5432
    restart: "on-failure"
    environment:
      POSTGRES_PASSWORD: password
  zookeeper:
    image: 'docker.io/bitnami/zookeeper:3-debian-10'
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: "on-failure"
  kafka:
    image: 'docker.io/bitnami/kafka:2-debian-10'
    ports:
      - '9092:9092'
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://$KAFKA_CFG_ADVERTISED_LISTENERS:9092
    depends_on:
      - zookeeper
    restart: "on-failure"
  binance-producer:
    build: ./binance
    volumes:
      - ./binance/secrets.py:/home/secrets.py:ro
    depends_on:
      - kafka
    command: -k kafka:9092
    restart: "on-failure"
  tweets-producer:
    build: ./tweepy
    volumes:
      - ./tweepy/secrets.py:/home/secrets.py:ro
    depends_on:
      - kafka
    command: -k kafka:9092
    restart: "on-failure"
  spark:
    image: bde2020/spark-master:3.0.0-hadoop3.2
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
  spark-worker:
    image: bde2020/spark-worker:3.0.0-hadoop3.2
    depends_on:
      - spark
    # ports:
    #   - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark:7077"
      - "SPARK_WORKER_CORES=1"
      - "SPARK_WORKER_MEMORY=1g"
    volumes:
      - spark_models:/models
  streamapp:
    build: ./streamapp
    depends_on:
      - spark
    environment:
      - "SPARK_MASTER=spark://spark:7077"
      - "SPARK_EXECUTOR_MEMORY=1g"
    command: >
      --lrmodel /models/spark-logistic-regression-model
      --vcmodel /models/spark-cv-model
      --jdbcurl jdbc:postgresql://timescale:5432/postgres
      --kafka kafka:9092
    restart: "on-failure"
    volumes:
      - spark_models:/models
  trainapp:
    build: ./trainapp
    environment:
      - "SPARK_MASTER=spark://spark:7077"
      - "SPARK_EXECUTOR_MEMORY=1g"
    command: >
      --lrmodel /models/spark-logistic-regression-model
      --vcmodel /models/spark-cv-model
      --jdbcurl jdbc:postgresql://timescale:5432/postgres
    restart: "no"
    volumes:
      - spark_models:/models
  grafana:
    image: grafana/grafana:7.1.5-ubuntu
    restart: "no"
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - 3000:3000
    environment:
      GF_RENDERING_SERVER_URL: http://grafana-renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
  grafana-renderer:
    image: grafana/grafana-image-renderer
    restart: "no"
    environment:
      BROWSER_TZ: Europe/Stockholm
  pgadmin:
    image: dpage/pgadmin4
    restart: "no"
    volumes:
      - pgadmin:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@localhost
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - 9080:80


volumes:
  timescale_data:
  zookeeper_data:
  kafka_data:
  hadoop_namenode:
  hadoop_datanode:
  grafana_data:
  spark_models:
  pgadmin:
